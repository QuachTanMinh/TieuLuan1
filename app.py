import streamlit as st
import cv2
import numpy as np
from PIL import Image

st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh n√¢ng cao", layout="wide")
st.title("üì∑ Demo X·ª≠ L√Ω ·∫¢nh v·ªõi OpenCV + Streamlit")

# ---------------------------
# Utils
# ---------------------------
def load_image_rgb(uploaded_file) -> np.ndarray:
    """
    ƒê·∫£m b·∫£o ·∫£nh lu√¥n l√† RGB 3 k√™nh (tr√°nh RGBA/LA/P mode g√¢y l·ªói cv2.cvtColor).
    """
    img = Image.open(uploaded_file).convert("RGB")
    return np.array(img)  # RGB

def show_pair(img_left, img_right, cap_left="·∫¢nh g·ªëc", cap_right="·∫¢nh sau x·ª≠ l√Ω"):
    c1, c2 = st.columns(2)
    with c1:
        st.image(img_left, caption=cap_left, use_container_width=True)
    with c2:
        st.image(img_right, caption=cap_right, use_container_width=True)

def unsharp_mask_rgb(img_rgb: np.ndarray, radius: float = 1.5, amount: float = 1.0) -> np.ndarray:
    """
    Unsharp Mask cho ·∫£nh m√†u RGB.
    radius: sigma cho Gaussian blur (d√πng (0,0) ƒë·ªÉ t·ª± suy ra kernel t·ª´ sigma).
    amount: h·ªá s·ªë l√†m n√©t, 1.0 ~ nh·∫π, 1.5‚Äì2.0 ~ m·∫°nh.
    """
    blur = cv2.GaussianBlur(img_rgb, (0, 0), radius)
    sharp = cv2.addWeighted(img_rgb, 1.0 + amount, blur, -amount, 0)
    return sharp

# ---------------------------
# Giao di·ªán
# ---------------------------
task = st.sidebar.selectbox(
    "Ch·ªçn b√†i to√°n:",
    ("üöó Ti·ªÅn x·ª≠ l√Ω nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe",
     "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS",
     "üåô N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p √°nh s√°ng k√©m")
)

uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "jpeg", "png"])

if uploaded_file is None:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i l√™n m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

# Lu√¥n √©p v·ªÅ RGB 3 k√™nh ƒë·ªÉ tr√°nh l·ªói cv2.cvtColor
img_rgb = load_image_rgb(uploaded_file)
st.image(img_rgb, caption="·∫¢nh g·ªëc (RGB)", use_container_width=True)

# ======================================================
# üöó 1) TI·ªÄN X·ª¨ L√ù NH·∫¨N D·∫†NG BI·ªÇN S·ªê XE
# ======================================================
if task == "üöó Ti·ªÅn x·ª≠ l√Ω nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe":
    gray = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2GRAY)

    # CLAHE tr√™n ·∫£nh x√°m
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    gray_clahe = clahe.apply(gray)

    # Bilateral filter gi·ªØ bi√™n
    gray_bi = cv2.bilateralFilter(gray_clahe, d=9, sigmaColor=75, sigmaSpace=75)

    # Canny
    edges = cv2.Canny(gray_bi, 100, 200)

    st.subheader("Pipeline bi·ªÉn s·ªë xe")
    st.image([gray, gray_clahe, gray_bi, edges],
             caption=["Grayscale", "CLAHE (x√°m)", "Bilateral", "Canny"],
             use_container_width=True)

# ======================================================
# üõ∞Ô∏è 2) C·∫¢I THI·ªÜN ·∫¢NH V·ªÜ TINH GIS (ƒê√É FIX)
# ======================================================
elif task == "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS":
    # 1) C√¢n b·∫±ng histogram tr√™n k√™nh Y (gi·ªØ m√†u ƒë√∫ng)
    ycrcb = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2YCrCb)
    Y, Cr, Cb = cv2.split(ycrcb)
    Y_eq = cv2.equalizeHist(Y)  # y√™u c·∫ßu ·∫£nh 8-bit 1 k√™nh -> OK
    img_eq = cv2.cvtColor(cv2.merge((Y_eq, Cr, Cb)), cv2.COLOR_YCrCb2RGB)

    # 2) Unsharp Masking ƒë·ªÉ tƒÉng ƒë·ªô s·∫Øc n√©t (tr√™n ·∫£nh m√†u)
    radius = st.sidebar.slider("Unsharp radius (sigma)", 0.5, 3.0, 1.2, 0.1)
    amount = st.sidebar.slider("Unsharp amount", 0.2, 2.5, 0.8, 0.1)
    img_sharp = unsharp_mask_rgb(img_eq, radius=radius, amount=amount)

    # 3) Bilateral filter ƒë·ªÉ l√†m m∆∞·ª£t nh∆∞ng gi·ªØ bi√™n
    d = st.sidebar.slider("Bilateral d (pixels)", 5, 15, 9, 1)
    sColor = st.sidebar.slider("Bilateral sigmaColor", 10, 150, 50, 5)
    sSpace = st.sidebar.slider("Bilateral sigmaSpace", 10, 150, 50, 5)
    img_final = cv2.bilateralFilter(img_sharp, d=d, sigmaColor=sColor, sigmaSpace=sSpace)

    st.subheader("Pipeline ·∫£nh v·ªá tinh (m√†u)")
    st.image([img_eq, img_sharp, img_final],
             caption=["Equalize k√™nh Y (gi·ªØ m√†u)", "Unsharp Masking", "Bilateral (k·∫øt qu·∫£)"],
             use_container_width=True)

# ======================================================
# üåô 3) ·∫¢NH √ÅNH S√ÅNG K√âM (GI·ªÆ M√ÄU)
# ======================================================
elif task == "üåô N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p √°nh s√°ng k√©m":
    # L√†m s√°ng & tƒÉng t∆∞∆°ng ph·∫£n tr√™n k√™nh Y ƒë·ªÉ kh√¥ng l·ªách m√†u
    ycrcb = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2YCrCb)
    Y, Cr, Cb = cv2.split(ycrcb)

    # TƒÉng s√°ng nh·∫π tr∆∞·ªõc khi CLAHE (alpha>1 -> s√°ng h∆°n)
    alpha = st.sidebar.slider("TƒÉng s√°ng (alpha)", 1.0, 2.5, 1.3, 0.1)
    Y_bright = cv2.convertScaleAbs(Y, alpha=alpha, beta=0)

    clahe_clip = st.sidebar.slider("CLAHE clipLimit", 1.0, 5.0, 3.0, 0.1)
    tile = st.sidebar.slider("CLAHE tileGrid", 4, 16, 8, 1)
    clahe = cv2.createCLAHE(clipLimit=clahe_clip, tileGridSize=(tile, tile))
    Y_clahe = clahe.apply(Y_bright)

    img_clahe = cv2.cvtColor(cv2.merge((Y_clahe, Cr, Cb)), cv2.COLOR_YCrCb2RGB)

    # Kh·ª≠ nhi·ªÖu m√†u (NLM) tr√™n ·∫£nh m√†u
    h = st.sidebar.slider("Denoise h (luminance)", 5, 20, 10, 1)
    hc = st.sidebar.slider("Denoise hColor (chrominance)", 5, 20, 10, 1)
    denoised = cv2.fastNlMeansDenoisingColored(img_clahe, None, h, hc, 7, 21)

    show_pair(img_rgb, denoised, "·∫¢nh g·ªëc (RGB)", "Sau c·∫£i thi·ªán √°nh s√°ng k√©m")
