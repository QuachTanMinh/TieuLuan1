import streamlit as st
import cv2
import numpy as np
from PIL import Image

st.title("üì∏ Demo x·ª≠ l√Ω ·∫£nh n√¢ng cao")
st.write("Ch·ªçn lo·∫°i x·ª≠ l√Ω ·∫£nh:")

option = st.selectbox(
    "Ch·ªçn x·ª≠ l√Ω",
    ["üöó Ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe", "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS", "üåô ·∫¢nh ch·ª•p √°nh s√°ng k√©m"]
)

uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "png", "jpeg"])

if uploaded_file:
    image = Image.open(uploaded_file)
    img_array = np.array(image)

    st.image(img_array, caption="·∫¢nh g·ªëc", use_column_width=True)

    # --- 1. Ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe ---
    if option == "üöó Ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe":
        # Gi·ªØ m√†u nh∆∞ng th√™m b∆∞·ªõc grayscale ri√™ng cho c·∫°nh
        gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)

        # CLAHE
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        gray_clahe = clahe.apply(gray)

        # L·ªçc nhi·ªÖu
        filtered = cv2.bilateralFilter(gray_clahe, 9, 75, 75)

        # Canny edge
        edges = cv2.Canny(filtered, 100, 200)

        st.image([gray, gray_clahe, filtered, edges],
                 caption=["Grayscale", "CLAHE", "Bilateral Filter", "Canny Edge"],
                 use_column_width=True)

    # --- 2. C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS ---
    elif option == "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS":
        # C√¢n b·∫±ng histogram tr√™n k√™nh Y (YCrCb) => gi·ªØ m√†u
        ycrcb = cv2.cvtColor(img_array, cv2.COLOR_RGB2YCrCb)
        y, cr, cb = cv2.split(ycrcb)
        y_eq = cv2.equalizeHist(y)
        ycrcb_eq = cv2.merge([y_eq, cr, cb])
        img_eq = cv2.cvtColor(ycrcb_eq, cv2.COLOR_YCrCb2RGB)

        # Unsharp Masking (l√†m n√©t)
        gaussian = cv2.GaussianBlur(img_array, (9, 9), 10.0)
        unsharp = cv2.addWeighted(img_array, 1.5, gaussian, -0.5, 0)

        # Bilateral filter (l√†m m∆∞·ª£t nh∆∞ng gi·ªØ c·∫°nh)
        bilateral = cv2.bilateralFilter(img_array, 9, 75, 75)

        st.image([img_eq, unsharp, bilateral],
                 caption=["Histogram Equalization", "Unsharp Masking", "Bilateral Filter"],
                 use_column_width=True)

    # --- 3. N√¢ng cao ·∫£nh √°nh s√°ng k√©m ---
    elif option == "üåô ·∫¢nh ch·ª•p √°nh s√°ng k√©m":
        # Chuy·ªÉn sang YCrCb v√† tƒÉng s√°ng tr√™n k√™nh Y
        ycrcb = cv2.cvtColor(img_array, cv2.COLOR_RGB2YCrCb)
        y, cr, cb = cv2.split(ycrcb)

        # CLAHE tr√™n k√™nh Y (gi·ªØ m√†u g·ªëc)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
        y_clahe = clahe.apply(y)
        ycrcb_clahe = cv2.merge([y_clahe, cr, cb])
        img_clahe = cv2.cvtColor(ycrcb_clahe, cv2.COLOR_YCrCb2RGB)

        # Gi·∫£m nhi·ªÖu Non-local Means
        denoised = cv2.fastNlMeansDenoisingColored(img_clahe, None, 10, 10, 7, 21)

        st.image([img_clahe, denoised],
                 caption=["CLAHE tr√™n k√™nh Y", "Sau gi·∫£m nhi·ªÖu"],
                 use_column_width=True)
