import cv2
import numpy as np
import streamlit as st

st.title("üñºÔ∏è ·ª®ng d·ª•ng X·ª≠ l√Ω ·∫¢nh Demo")
st.write("Ch·ªçn lo·∫°i x·ª≠ l√Ω ·∫£nh ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n")

uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "jpeg", "png"])

option = st.selectbox(
    "Ch·ªçn ch·∫ø ƒë·ªô x·ª≠ l√Ω:",
    ["Ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe", "C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS", "N√¢ng cao ·∫£nh √°nh s√°ng k√©m"]
)

if uploaded_file is not None:
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, 1)

    st.subheader("·∫¢nh g·ªëc")
    st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), use_container_width=True)

    # ------------------------------
    # 1. Ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe
    # ------------------------------
    if option == "Ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe":
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # CLAHE ƒë·ªÉ tƒÉng t∆∞∆°ng ph·∫£n
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        contrast = clahe.apply(gray)

        # L·ªçc nhi·ªÖu
        denoised = cv2.bilateralFilter(contrast, 11, 17, 17)

        # Canny edge
        edges = cv2.Canny(denoised, 30, 200)

        st.subheader("·∫¢nh sau ti·ªÅn x·ª≠ l√Ω bi·ªÉn s·ªë xe")
        st.image(edges, caption="Edges ƒë·ªÉ ph√°t hi·ªán bi·ªÉn s·ªë", use_container_width=True, channels="GRAY")

    # ------------------------------
    # 2. C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS
    # ------------------------------
    elif option == "C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS":
        # C√¢n b·∫±ng histogram
        img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
        img_yuv[:, :, 0] = cv2.equalizeHist(img_yuv[:, :, 0])
        hist_eq = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)

        # Unsharp Masking
        gaussian = cv2.GaussianBlur(hist_eq, (9, 9), 10)
        sharpened = cv2.addWeighted(hist_eq, 1.5, gaussian, -0.5, 0)

        # Bilateral filter
        smooth = cv2.bilateralFilter(sharpened, 9, 75, 75)

        st.subheader("·∫¢nh sau c·∫£i thi·ªán GIS")
        st.image(cv2.cvtColor(smooth, cv2.COLOR_BGR2RGB), caption="·∫¢nh v·ªá tinh c·∫£i thi·ªán", use_container_width=True)

    # ------------------------------
    # 3. ·∫¢nh √°nh s√°ng k√©m
    # ------------------------------
    elif option == "N√¢ng cao ·∫£nh √°nh s√°ng k√©m":
        img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)
        y, cr, cb = cv2.split(img_yuv)

        # CLAHE tr√™n k√™nh Y (ƒë·ªô s√°ng)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        y_clahe = clahe.apply(y)

        img_yuv = cv2.merge((y_clahe, cr, cb))
        bright = cv2.cvtColor(img_yuv, cv2.COLOR_YCrCb2BGR)

        # Gi·∫£m nhi·ªÖu
        denoised = cv2.fastNlMeansDenoisingColored(bright, None, 10, 10, 7, 21)

        st.subheader("·∫¢nh sau c·∫£i thi·ªán √°nh s√°ng k√©m")
        st.image(cv2.cvtColor(denoised, cv2.COLOR_BGR2RGB), caption="·∫¢nh n√¢ng cao √°nh s√°ng", use_container_width=True)
