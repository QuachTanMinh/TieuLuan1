import cv2
import numpy as np
import streamlit as st
from PIL import Image

st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh minh h·ªça", layout="wide")

st.title("üì∑ Demo X·ª≠ L√Ω ·∫¢nh v·ªõi OpenCV + Streamlit")

option = st.sidebar.selectbox(
    "Ch·ªçn b√†i to√°n x·ª≠ l√Ω ·∫£nh:",
    (
        "üöó Ti·ªÅn x·ª≠ l√Ω nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe",
        "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh trong GIS",
        "üåô N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p √°nh s√°ng k√©m",
    )
)

uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "png", "jpeg"])

def show_images(original, processed, caption1="·∫¢nh g·ªëc", caption2="·∫¢nh sau x·ª≠ l√Ω"):
    col1, col2 = st.columns(2)
    with col1:
        st.image(original, caption=caption1, use_container_width=True)
    with col2:
        st.image(processed, caption=caption2, use_container_width=True)

if uploaded_file is not None:
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

    # ======================================================
    # üöó 1. Ti·ªÅn x·ª≠ l√Ω cho nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe
    # ======================================================
    if option == "üöó Ti·ªÅn x·ª≠ l√Ω nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe":
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # TƒÉng t∆∞∆°ng ph·∫£n b·∫±ng CLAHE
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        enhanced = clahe.apply(gray)

        # L·ªçc nhi·ªÖu
        denoised = cv2.bilateralFilter(enhanced, 11, 17, 17)

        # L√†m n·ªïi b·∫≠t bi√™n c·∫°nh
        edges = cv2.Canny(denoised, 30, 200)

        show_images(gray, edges, "Grayscale", "Bi√™n c·∫°nh (Canny)")

    # ======================================================
    # üõ∞Ô∏è 2. C·∫£i thi·ªán ·∫£nh v·ªá tinh trong GIS
    # ======================================================
    elif option == "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh trong GIS":
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # C√¢n b·∫±ng histogram
        equalized = cv2.equalizeHist(gray)

        # Unsharp Masking
        gaussian = cv2.GaussianBlur(equalized, (9, 9), 10.0)
        unsharp = cv2.addWeighted(equalized, 1.5, gaussian, -0.5, 0)

        # L√†m m∆∞·ª£t gi·ªØ chi ti·∫øt
        smooth = cv2.bilateralFilter(unsharp, 9, 75, 75)

        show_images(gray, smooth, "Grayscale", "Sau c·∫£i thi·ªán GIS")

    # ======================================================
    # üåô 3. N√¢ng cao ·∫£nh ch·ª•p √°nh s√°ng k√©m
    # ======================================================
    elif option == "üåô N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p √°nh s√°ng k√©m":
        ycrcb = cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)
        y, cr, cb = cv2.split(ycrcb)

        # CLAHE cho k√™nh Y (ƒë·ªô s√°ng)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        y_clahe = clahe.apply(y)

        merged = cv2.merge((y_clahe, cr, cb))
        brightened = cv2.cvtColor(merged, cv2.COLOR_YCrCb2BGR)

        # Gi·∫£m nhi·ªÖu
        denoised = cv2.fastNlMeansDenoisingColored(brightened, None, 10, 10, 7, 21)

        show_images(img, denoised, "·∫¢nh g·ªëc", "Sau c·∫£i thi·ªán √°nh s√°ng k√©m")

else:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i l√™n m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω.")
